(()=>{var e={170:(e,t,n)=>{"use strict";n(666);var r=function(){var e=[],t=[],n=[];return{shots:e,ships:n,boardOccupied:t,placeShip:function(e,r,o,a){var i=function(e,t){for(var n=[],r=[],o=[],a=0;a<e;a++)n.push(a),r.push("x");return{length:e,sunk:!1,hitBoxes:n,destroyed:r,occupied:o,vertical:t,hit:function(e,t){var r=o.indexOf(e+t);n[r]="x"},isSunk:function(){for(var t=0,r=0;r<e;r++)"x"===n[r]&&t++;return t===e&&(this.sunk=!0,!0)}}}(o,a);if(!0===a)for(var c=0;c<i.length;c++){var s=["A","B","C","D","E","F","G","H","I","J"],u=s.indexOf(e);if(t.includes(e+(r+c))||!s[u+c]){alert("Illegal placement");break}i.occupied.push(s[u+c]+r),t.push(s[u+c]+r)}else for(var l=0;l<i.length;l++){if(t.includes(e+(r+l))||r+l>10){alert("Illegal placement");break}i.occupied.push(e+(r+l)),t.push(e+(r+l))}return n.push(i),i.occupied},receiveAttack:function(r,o,a){return e.push(r+o),t.includes(r+o)?(n[a].hit(r,o),!0===n[a].isSunk()?(console.log("".concat(n.filter((function(e){return!0===e.sunk})).length)),console.log("SHIP HAS BEEN SUNK!")):console.log("It's a hit!")):"missed!"},loose:function(){return n.filter((function(e){return!0===e.sunk})).length===n.length&&alert("All ships destroyed!")}}},o=function(e,t){var n=t;return{name:e,turn:!1,enemyBoard:n,makeMove:function e(){var t="ABCDEFGHIJ",r=t[Math.floor(Math.random()*t.length)],o=Math.floor(10*Math.random()+1),a=r+o;return n.shots.includes(a)?n.shots.includes(a)?e():void 0:{x:r,y:o,result:a}}}},a=n(379),i=n.n(a),c=n(795),s=n.n(c),u=n(569),l=n.n(u),d=n(565),p=n.n(d),h=n(216),f=n.n(h),A=n(589),g=n.n(A),v=n(426),m={};m.styleTagTransform=g(),m.setAttributes=p(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=f(),i()(v.Z,m),v.Z&&v.Z.locals&&v.Z.locals;var b=r(),y=r();o("Apina",y),function(e,t){for(var n=document.getElementById("gameboard1"),r=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),n.appendChild(a),a.dataset.id=r[o];for(var i=1;i<11;i++){var c=document.createElement("div");c.classList.add("box1"),c.textContent="",c.dataset.id=a.dataset.id+i,a.appendChild(c)}}for(var s=document.getElementById("gameboard2"),u=function(n){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=r[n];for(var a=function(a){var i=document.createElement("div");i.classList.add("box"),i.textContent="",i.dataset.id=o.dataset.id+a,o.appendChild(i),i.addEventListener("click",(function(){for(var o="",c=0;c<e.ships.length;c++)e.ships[c].occupied.includes(i.dataset.id)&&(o=c);e.receiveAttack(r[n],a,o),e.boardOccupied.includes(i.dataset.id)?i.style.backgroundColor="red":i.style.backgroundColor="blue",setTimeout((function(){for(var n=t.makeMove(),r=n.x,o=n.y,a="",i=0;i<e.ships.length;i++)t.enemyBoard.ships[i].occupied.includes(n.result)&&(a=i);console.log(n.result),t.enemyBoard.receiveAttack(r,o,a);for(var c=document.getElementsByClassName("box1"),s=0;s<c.length;s++)c[s].dataset.id===n.result&&(t.enemyBoard.boardOccupied.includes(n.result)?c[s].style.backgroundColor="red":c[s].style.backgroundColor="blue")}),850),e.loose(),t.enemyBoard.loose()}))},i=1;i<11;i++)a(i)},l=0;l<10;l++)u(l);document.getElementById("replay").addEventListener("click",(function(){window.location.reload(!0)}));var d=document.getElementsByClassName("box1"),p=document.getElementById("turn"),h=!1;p.addEventListener("click",(function(){h=!h,console.log(h)}));for(var f=0,A=[6,5,4,3,2],g=function(e){d[e].addEventListener("click",(function(){var n=function(e){return function(t){return[t.slice(0,e),t.slice(e)]}},r=n(1)(d[e].dataset.id)[0],o=parseInt(n(1)(d[e].dataset.id)[1],10);f<A.length?(t.enemyBoard.placeShip(r,o,A[f],h),function(){for(var e=document.getElementsByClassName("box1"),n=0;n<e.length;n++)t.enemyBoard.boardOccupied.includes(e[n].dataset.id)&&e[n].classList.add("shipBox")}(),f++,console.log(d[e].dataset.id),console.log(t.enemyBoard.ships)):alert("Time to play!")}))},v=0;v<d.length;v++)g(v)}(y,o("Nemesis",b)),y.placeShip("A",2,5,!1),y.placeShip("B",1,4,!1),y.placeShip("C",4,4,!1),y.placeShip("D",3,3,!1),y.placeShip("E",1,3,!1),y.placeShip("F",1,3,!1),y.placeShip("G",7,2,!1),y.placeShip("H",8,2,!1),y.placeShip("I",6,2,!1)},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),c=n(667),s=n.n(c),u=new URL(n(629),n.b),l=i()(o()),d=s()(u);l.push([e.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  /*background-color: rgb(89, 132, 182); v채liaikasesti n채kyviin*/\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE;0BACwB;EACxB,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;AACb;;AAEA;;EAEE,YAAY;AACd;;AAEA,kFAAkF;AAClF;EACE,iCAAiC;AACnC;;AAEA;EACE,8DAA8D;EAC9D,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,YAAY;EACZ,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,QAAQ;AACV",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  /*background-color: rgb(89, 132, 182); v채liaikasesti n채kyviin*/\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n'],sourceRoot:""}]);const p=l},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new S(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===h)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw a;return I()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=w(i,n);if(c){if(c===A)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var s=l(e,t,n);if("normal"===s.type){if(r=n.done?f:p,s.arg===A)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=f,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",h="executing",f="completed",A={};function g(){}function v(){}function m(){}var b={};s(b,a,(function(){return this}));var y=Object.getPrototypeOf,E=y&&y(y(j([])));E&&E!==n&&r.call(E,a)&&(b=E);var C=m.prototype=g.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function B(e,t){function n(o,a,i,c){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function w(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,w(e,n),"throw"===n.method))return A;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,A;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,A):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,A)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function j(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:I}}function I(){return{value:t,done:!0}}return v.prototype=m,s(C,"constructor",m),s(m,"constructor",v),v.displayName=s(m,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,c,"GeneratorFunction")),e.prototype=Object.create(C),e},e.awrap=function(e){return{__await:e}},x(B.prototype),s(B.prototype,i,(function(){return this})),e.AsyncIterator=B,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new B(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(C),s(C,c,"Generator"),s(C,a,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=j,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,A):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),A},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),A}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;L(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:j(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),A}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=n(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var f=o(h,r);r.byIndex=c,t.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=r(e,o),u=0;u<a.length;u++){var l=n(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},629:(e,t,n)=>{"use strict";e.exports=n.p+"b6a51100243ae5c1ad98.jpeg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n(666),n(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,