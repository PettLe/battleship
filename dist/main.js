(()=>{var n={170:(n,t,e)=>{"use strict";e(666);var r=function(){var n=[],t=[],e=[];return{shots:n,ships:e,boardOccupied:t,placeFree:function(n,e,r,o){function a(n,t){for(var e=0;e<n.length;e++)for(var r=0;r<t.length;r++)if(n[e]===t[r])return!0;return!1}for(var i=0;i<r;i++){if(!0===o){for(var c=[],s=0;s<r;s++){var u=["A","B","C","D","E","F","G","H","I","J"],l=u.indexOf(n);c.push(u[l+s]+e)}return c.includes(NaN)||a(c,t)?(c.splice(0,c.length),!1):(c.splice(0,c.length),!0)}if(!1===o){for(var d=[],f=[1,2,3,4,5,6,7,8,9,10],h=f.indexOf(e),p=0;p<r;p++)d.push(n+f[h+p]);return d.includes("".concat(n,"undefined"))||a(d,t)?(d.splice(0,d.length),!1):(d.splice(0,d.length),!0)}}},placeShip:function(n,r,o,a){var i=function(n,t){for(var e=[],r=[],o=[],a=0;a<n;a++)e.push(a),r.push("x");return{length:n,sunk:!1,hitBoxes:e,destroyed:r,occupied:o,vertical:t,hit:function(n,t){var r=o.indexOf(n+t);e[r]="x"},isSunk:function(){for(var t=0,r=0;r<n;r++)"x"===e[r]&&t++;return t===n&&(this.sunk=!0,!0)}}}(o,a);if(!0===a)for(var c=0;c<i.length;c++){var s=["A","B","C","D","E","F","G","H","I","J"],u=s.indexOf(n);if(t.includes(s[u+c]+r)||!s[u+c])return!1;i.occupied.push(s[u+c]+r),t.push(s[u+c]+r)}else for(var l=0;l<i.length;l++){if(t.includes(n+(r+l))||r+l>10)return!1;i.occupied.push(n+(r+l)),t.push(n+(r+l))}return e.push(i),i.occupied},receiveAttack:function(r,o,a){return n.push(r+o),t.includes(r+o)?(e[a].hit(r,o),!0===e[a].isSunk()?"SHIP HAS BEEN SUNK!":void 0):"missed!"},loose:function(){return e.filter((function(n){return!0===n.sunk})).length===e.length&&alert("All ships destroyed!")}}},o=function(n,t){var e=t;return{name:n,turn:!1,enemyBoard:e,makeMove:function n(){var t="ABCDEFGHIJ",r=t[Math.floor(Math.random()*t.length)],o=Math.floor(10*Math.random()+1),a=r+o;return e.shots.includes(a)?e.shots.includes(a)?n():void 0:{x:r,y:o,result:a}}}},a=e(379),i=e.n(a),c=e(795),s=e.n(c),u=e(569),l=e.n(u),d=e(565),f=e.n(d),h=e(216),p=e.n(h),A=e(589),v=e.n(A),g=e(426),m={};m.styleTagTransform=v(),m.setAttributes=f(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=p(),i()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;var b=r(),y=r();o("Apina",y),function(n,t){for(var e=document.getElementById("gameboard1"),r=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),e.appendChild(a),a.dataset.id=r[o];for(var i=1;i<11;i++){var c=document.createElement("div");c.classList.add("box1"),c.textContent="",c.dataset.id=a.dataset.id+i,a.appendChild(c)}}var s=document.getElementById("gameboard2");s.style.visibility="hidden";for(var u=function(e){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=r[e];for(var a=function(a){var i=document.createElement("div");i.classList.add("box"),i.textContent="",i.dataset.id=o.dataset.id+a,o.appendChild(i),i.addEventListener("click",(function(){for(var o="",c=0;c<n.ships.length;c++)n.ships[c].occupied.includes(i.dataset.id)&&(o=c);n.receiveAttack(r[e],a,o),n.boardOccupied.includes(i.dataset.id)?i.style.backgroundColor="red":i.style.backgroundColor="blue",setTimeout((function(){for(var e=t.makeMove(),r=e.x,o=e.y,a="",i=0;i<n.ships.length;i++)t.enemyBoard.ships[i].occupied.includes(e.result)&&(a=i);t.enemyBoard.receiveAttack(r,o,a);for(var c=document.getElementsByClassName("box1"),s=0;s<c.length;s++)c[s].dataset.id===e.result&&(t.enemyBoard.boardOccupied.includes(e.result)?c[s].style.backgroundColor="red":c[s].style.backgroundColor="blue")}),850),n.loose(),t.enemyBoard.loose()}))},i=1;i<11;i++)a(i)},l=0;l<10;l++)u(l);document.getElementById("replay").addEventListener("click",(function(){window.location.reload(!0)}));var d=document.getElementsByClassName("box1"),f=document.getElementById("turn"),h=!1;f.textContent="Horizontal",f.addEventListener("click",(function(){h=!h,f.textContent=!1===h?"Horizontal":"Vertical"}));for(var p=0,A=0,v=[6,5,4,3,2],g=function(e){d[e].addEventListener("click",(function(){var r=function(n){return function(t){return[t.slice(0,n),t.slice(n)]}},o=r(1)(d[e].dataset.id)[0],a=parseInt(r(1)(d[e].dataset.id)[1],10);function i(n,t){for(var e=0;e<n.length;e++)for(var r=0;r<t.length;r++)if(n[e]===t[r])return!0;return!1}p<v.length&&(t.enemyBoard.placeFree(o,a,v[p],h)?(t.enemyBoard.placeShip(o,a,v[p],h),function(){for(var n=document.getElementsByClassName("box1"),e=0;e<n.length;e++)t.enemyBoard.boardOccupied.includes(n[e].dataset.id)&&n[e].classList.add("shipBox")}(),5==++p&&(s.style.visibility="visible",alert("TIME TO PLAY!"))):alert("Invalid ship placement, try again"));var c="ABCDEFGHIJ",u=Math.random()<.5;if(A<v.length)if(!0===u)for(var l=[];;){for(var f=c[Math.floor(Math.random()*c.length)],g=Math.floor(10*Math.random()+1),m=0;m<v[A];m++){var b=["A","B","C","D","E","F","G","H","I","J"],y=b.indexOf(f);l.push(b[y+m]+g)}if(!l.includes(NaN)&&!i(l,n.boardOccupied)){n.placeShip(f,g,v[A],u),A+=1;break}l.splice(0,l.length)}else for(var E=[];;){for(var C=c[Math.floor(Math.random()*c.length)],x=Math.floor(10*Math.random()+1),B=[1,2,3,4,5,6,7,8,9,10],w=B.indexOf(x),k=0;k<v[A];k++)E.push(C+B[w+k]);if(!E.includes("".concat(C,"undefined"))&&!i(E,n.boardOccupied)){n.placeShip(C,x,v[A],u),A+=1;break}E.splice(0,E.length)}}))},m=0;m<d.length;m++)g(m)}(y,o("Nemesis",b))},426:(n,t,e)=>{"use strict";e.d(t,{Z:()=>f});var r=e(537),o=e.n(r),a=e(645),i=e.n(a),c=e(667),s=e.n(c),u=new URL(e(629),e.b),l=i()(o()),d=s()(u);l.push([n.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n  opacity: 0.7;\n}\n\n#gameboard2 .box:hover {\n  background-color: rgb(59, 59, 59);\n  opacity: 0.5;\n}\n\n#gameboard1 .shipBox {\n  background-color: rgb(12, 12, 12);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n\n.description {\n  max-width: 15vw;\n  font-size: 1.4rem;\n  padding: 2vh;\n  background-color: rgba(218, 218, 218, 0.4);\n  border-radius: 15px;\n}\n\nspan {\n  font-size: 1.2rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,YAAY;EACZ,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;EACX,YAAY;AACd;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,YAAY;EACZ,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,QAAQ;AACV;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,YAAY;EACZ,0CAA0C;EAC1C,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n  opacity: 0.7;\n}\n\n#gameboard2 .box:hover {\n  background-color: rgb(59, 59, 59);\n  opacity: 0.5;\n}\n\n#gameboard1 .shipBox {\n  background-color: rgb(12, 12, 12);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n\n.description {\n  max-width: 15vw;\n  font-size: 1.4rem;\n  padding: 2vh;\n  background-color: rgba(218, 218, 218, 0.4);\n  border-radius: 15px;\n}\n\nspan {\n  font-size: 1.2rem;\n}\n'],sourceRoot:""}]);const f=l},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<n.length;u++){var l=[].concat(n[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},666:n=>{var t=function(n){"use strict";var t,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{s({},"")}catch(n){s=function(n,t,e){return n[t]=e}}function u(n,t,e,r){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new j(r||[]);return a._invoke=function(n,t,e){var r=d;return function(o,a){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw a;return O()}for(e.method=o,e.arg=a;;){var i=e.delegate;if(i){var c=w(i,e);if(c){if(c===A)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===d)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var s=l(n,t,e);if("normal"===s.type){if(r=e.done?p:f,s.arg===A)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r=p,e.method="throw",e.arg=s.arg)}}}(n,e,i),a}function l(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=u;var d="suspendedStart",f="suspendedYield",h="executing",p="completed",A={};function v(){}function g(){}function m(){}var b={};s(b,a,(function(){return this}));var y=Object.getPrototypeOf,E=y&&y(y(S([])));E&&E!==e&&r.call(E,a)&&(b=E);var C=m.prototype=v.prototype=Object.create(b);function x(n){["next","throw","return"].forEach((function(t){s(n,t,(function(n){return this._invoke(t,n)}))}))}function B(n,t){function e(o,a,i,c){var s=l(n[o],n,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(n){e("next",n,i,c)}),(function(n){e("throw",n,i,c)})):t.resolve(d).then((function(n){u.value=n,i(u)}),(function(n){return e("throw",n,i,c)}))}c(s.arg)}var o;this._invoke=function(n,r){function a(){return new t((function(t,o){e(n,r,t,o)}))}return o=o?o.then(a,a):a()}}function w(n,e){var r=n.iterator[e.method];if(r===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=t,w(n,e),"throw"===e.method))return A;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=l(r,n.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,A;var a=o.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,A):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,A)}function k(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function L(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function j(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(k,this),this.reset(!0)}function S(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,i=function e(){for(;++o<n.length;)if(r.call(n,o))return e.value=n[o],e.done=!1,e;return e.value=t,e.done=!0,e};return i.next=i}}return{next:O}}function O(){return{value:t,done:!0}}return g.prototype=m,s(C,"constructor",m),s(m,"constructor",g),g.displayName=s(m,c,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,s(n,c,"GeneratorFunction")),n.prototype=Object.create(C),n},n.awrap=function(n){return{__await:n}},x(B.prototype),s(B.prototype,i,(function(){return this})),n.AsyncIterator=B,n.async=function(t,e,r,o,a){void 0===a&&(a=Promise);var i=new B(u(t,e,r,o),a);return n.isGeneratorFunction(e)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},x(C),s(C,c,"Generator"),s(C,a,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=S,j.prototype={constructor:j,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!n)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function o(r,o){return c.type="throw",c.arg=n,e.next=r,o&&(e.method="next",e.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,A):this.complete(i)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),A},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),L(e),A}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;L(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,r){return this.delegate={iterator:S(n),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=t),A}},n}(n.exports);try{regeneratorRuntime=t}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var f=e(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=o(h,r);r.byIndex=c,t.splice(c,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=e(a[i]);t[c].references--}for(var s=r(n,o),u=0;u<a.length;u++){var l=e(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},629:(n,t,e)=>{"use strict";n.exports=e.p+"b6a51100243ae5c1ad98.jpeg"}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e(666),e(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,