(()=>{var e={170:(e,n,t)=>{"use strict";t(666);var r=function(){var e=[],n=[],t=[];return{shots:e,ships:t,boardOccupied:n,placeShip:function(e,r,o,a){var i=function(e,n){for(var t=[],r=[],o=[],a=0;a<e;a++)t.push(a),r.push("x");return{length:e,sunk:!1,hitBoxes:t,destroyed:r,occupied:o,vertical:n,hit:function(e,n){var r=o.indexOf(e+n);t[r]="x"},isSunk:function(){for(var n=0,r=0;r<e;r++)"x"===t[r]&&n++;return n===e&&(this.sunk=!0,!0)}}}(o,a);if(!0===a)for(var c=0;c<i.length;c++){var s=["A","B","C","D","E","F","G","H","I","J"],u=s.indexOf(e);n.includes(e+(r+c))||!s[u+c]?(alert("Illegal placement"),window.location.reload()):(i.occupied.push(s[u+c]+r),n.push(s[u+c]+r))}else for(var l=0;l<i.length;l++)n.includes(e+(r+l))||r+l>10?(alert("Illegal placement"),window.location.reload()):(i.occupied.push(e+(r+l)),n.push(e+(r+l)));return t.push(i),i.occupied},receiveAttack:function(r,o,a){return e.push(r+o),n.includes(r+o)?(t[a].hit(r,o),!0===t[a].isSunk()?(console.log("".concat(t.filter((function(e){return!0===e.sunk})).length)),console.log("SHIP HAS BEEN SUNK!")):console.log("It's a hit!")):"missed!"},loose:function(){return t.filter((function(e){return!0===e.sunk})).length===t.length&&alert("All ships destroyed!")}}},o=function(e,n){var t=n;return{name:e,turn:!1,enemyBoard:t,makeMove:function e(){var n="ABCDEFGHIJ",r=n[Math.floor(Math.random()*n.length)],o=Math.floor(10*Math.random()+1),a=r+o;return t.shots.includes(a)?t.shots.includes(a)?e():void 0:{x:r,y:o,result:a}}}},a=t(379),i=t.n(a),c=t(795),s=t.n(c),u=t(569),l=t.n(u),d=t(565),p=t.n(d),h=t(216),f=t.n(h),A=t(589),g=t.n(A),v=t(426),m={};m.styleTagTransform=g(),m.setAttributes=p(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=f(),i()(v.Z,m),v.Z&&v.Z.locals&&v.Z.locals;var b=r(),y=r();o("Apina",y),function(e,n){for(var t=document.getElementById("gameboard1"),r=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),t.appendChild(a),a.dataset.id=r[o];for(var i=1;i<11;i++){var c=document.createElement("div");c.classList.add("box1"),c.textContent="",c.dataset.id=a.dataset.id+i,a.appendChild(c)}}for(var s=document.getElementById("gameboard2"),u=function(t){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=r[t];for(var a=function(a){var i=document.createElement("div");i.classList.add("box"),i.textContent="",i.dataset.id=o.dataset.id+a,o.appendChild(i),i.addEventListener("click",(function(){for(var o="",c=0;c<e.ships.length;c++)e.ships[c].occupied.includes(i.dataset.id)&&(o=c);e.receiveAttack(r[t],a,o),e.boardOccupied.includes(i.dataset.id)?i.style.backgroundColor="red":i.style.backgroundColor="blue",setTimeout((function(){for(var t=n.makeMove(),r=t.x,o=t.y,a="",i=0;i<e.ships.length;i++)n.enemyBoard.ships[i].occupied.includes(t.result)&&(a=i);console.log(t.result),n.enemyBoard.receiveAttack(r,o,a);for(var c=document.getElementsByClassName("box1"),s=0;s<c.length;s++)c[s].dataset.id===t.result&&(n.enemyBoard.boardOccupied.includes(t.result)?c[s].style.backgroundColor="red":c[s].style.backgroundColor="blue")}),850),e.loose(),n.enemyBoard.loose()}))},i=1;i<11;i++)a(i)},l=0;l<10;l++)u(l);document.getElementById("replay").addEventListener("click",(function(){window.location.reload(!0)}));for(var d=document.getElementsByClassName("shipBtn"),p=document.getElementsByClassName("box1"),h=function(e){d[e].addEventListener("click",(function(){for(var t=function(t){p[t].addEventListener("mouseover",(function(){for(var r=0;r<d[e].value;r++)!n.enemyBoard.boardOccupied.includes(p[t+r].dataset.id)&&t+r<10&&(p[t+r].style.backgroundColor="orange")})),p[t].addEventListener("mouseout",(function(){for(var r=0;r<d[e].value;r++)n.enemyBoard.boardOccupied.includes(p[t+r].dataset.id)||(p[t+r].style.backgroundColor="rgb(89, 132, 182)")}))},r=0;r<p.length;r++)t(r)}))},f=0;f<d.length;f++)h(f)}(y,o("Nemesis",b)),b.placeShip("A",1,5,!1),b.placeShip("B",2,4,!1),b.placeShip("C",3,4,!1),b.placeShip("D",4,3,!1),b.placeShip("E",5,3,!1),b.placeShip("F",7,3,!1),b.placeShip("G",3,2,!0),b.placeShip("H",6,2,!1),b.placeShip("J",6,2,!1),y.placeShip("A",2,5,!1),y.placeShip("B",1,4,!1),y.placeShip("C",4,4,!1),y.placeShip("D",3,3,!1),y.placeShip("E",1,3,!1),y.placeShip("F",1,3,!1),y.placeShip("G",7,2,!1),y.placeShip("H",8,2,!1),y.placeShip("I",6,2,!1),function(e){for(var n=document.getElementsByClassName("box1"),t=0;t<n.length;t++)e.includes(n[t].dataset.id)&&n[t].classList.add("shipBox")}(b.boardOccupied),console.log(b.ships),console.log(b.boardOccupied)},426:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(667),s=t.n(c),u=new URL(t(629),t.b),l=i()(o()),d=s()(u);l.push([e.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  /*background-color: rgb(89, 132, 182); v채liaikasesti n채kyviin*/\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE;0BACwB;EACxB,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;AACb;;AAEA;;EAEE,YAAY;AACd;;AAEA,kFAAkF;AAClF;EACE,iCAAiC;AACnC;;AAEA;EACE,8DAA8D;EAC9D,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,YAAY;EACZ,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,QAAQ;AACV",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  /*background-color: rgb(89, 132, 182); v채liaikasesti n채kyviin*/\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n'],sourceRoot:""}]);const p=l},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},666:e=>{var n=function(e){"use strict";var n,t=Object.prototype,r=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{s({},"")}catch(e){s=function(e,n,t){return e[n]=t}}function u(e,n,t,r){var o=n&&n.prototype instanceof g?n:g,a=Object.create(o.prototype),i=new L(r||[]);return a._invoke=function(e,n,t){var r=d;return function(o,a){if(r===h)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw a;return O()}for(t.method=o,t.arg=a;;){var i=t.delegate;if(i){var c=w(i,t);if(c){if(c===A)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(r===d)throw r=f,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r=h;var s=l(e,n,t);if("normal"===s.type){if(r=t.done?f:p,s.arg===A)continue;return{value:s.arg,done:t.done}}"throw"===s.type&&(r=f,t.method="throw",t.arg=s.arg)}}}(e,t,i),a}function l(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",h="executing",f="completed",A={};function g(){}function v(){}function m(){}var b={};s(b,a,(function(){return this}));var y=Object.getPrototypeOf,E=y&&y(y(j([])));E&&E!==t&&r.call(E,a)&&(b=E);var C=m.prototype=g.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(n){s(e,n,(function(e){return this._invoke(n,e)}))}))}function B(e,n){function t(o,a,i,c){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?n.resolve(d.__await).then((function(e){t("next",e,i,c)}),(function(e){t("throw",e,i,c)})):n.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return t("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new n((function(n,o){t(e,r,n,o)}))}return o=o?o.then(a,a):a()}}function w(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,w(e,t),"throw"===t.method))return A;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=l(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,A;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,A):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,A)}function k(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function S(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function t(){for(;++o<e.length;)if(r.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:O}}function O(){return{value:n,done:!0}}return v.prototype=m,s(C,"constructor",m),s(m,"constructor",v),v.displayName=s(m,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===v||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,c,"GeneratorFunction")),e.prototype=Object.create(C),e},e.awrap=function(e){return{__await:e}},x(B.prototype),s(B.prototype,i,(function(){return this})),e.AsyncIterator=B,e.async=function(n,t,r,o,a){void 0===a&&(a=Promise);var i=new B(u(n,t,r,o),a);return e.isGeneratorFunction(t)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(C),s(C,c,"Generator"),s(C,a,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=j,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(r,o){return c.type="throw",c.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,n){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=n&&n<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=n,a?(this.method="next",this.next=a.finallyLoc,A):this.complete(i)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),A},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),S(t),A}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var o=r.arg;S(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),A}},e}(e.exports);try{regeneratorRuntime=n}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=t(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var f=o(h,r);r.byIndex=c,n.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),u=0;u<a.length;u++){var l=t(a[u]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},629:(e,n,t)=>{"use strict";e.exports=t.p+"b6a51100243ae5c1ad98.jpeg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t(666),t(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,