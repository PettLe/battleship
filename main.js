(()=>{var e={170:(e,t,r)=>{"use strict";r(666);var n=function(){var e=[],t=[],r=[];return{shots:e,ships:r,boardOccupied:t,placeShip:function(e,n,o){for(var a=function(e){for(var t=[],r=[],n=[],o=0;o<e;o++)t.push(o),r.push("x");return{length:e,sunk:!1,hitBoxes:t,destroyed:r,occupied:n,hit:function(e,r){var o=n.indexOf(e+r);t[o]="x"},isSunk:function(){for(var r=0,n=0;n<e;n++)"x"===t[n]&&r++;return r===e&&(this.sunk=!0,!0)}}}(o),c=0;c<a.length;c++)a.occupied.push(e+(n+c)),t.push(e+(n+c));return r.push(a),a.occupied},receiveAttack:function(n,o,a){return e.push(n+o),t.includes(n+o)?(r[a].hit(n,o),!0===r[a].isSunk()?(console.log("".concat(r.filter((function(e){return!0===e.sunk})).length," AAAAAAA")),console.log(r),console.log(a),console.log("SHIP HAS BEEN SUNK!")):(console.log(r),console.log(a),console.log("It's a hit!"))):"missed!"},loose:function(){return r.filter((function(e){return!0===e.sunk})).length===r.length&&alert("All ships destroyed!")}}},o=function(e,t){var r=t;return{name:e,turn:!1,enemyBoard:r,makeMove:function e(){var t="ABCDEFGHIJ",n=t[Math.floor(Math.random()*t.length)],o=Math.floor(10*Math.random()+1),a=n+o;return r.shots.includes(a)?r.shots.includes(a)?e():void 0:{x:n,y:o,result:a}}}},a=n(),c=(o("Apina",n()),o("Nemesis",a));a.placeShip("E",4),a.receiveAttack("A",1),a.receiveAttack("A",2),a.receiveAttack("A",3),a.receiveAttack("A",4),a.receiveAttack("A",5),a.receiveAttack("A",6),a.receiveAttack("A",7),a.receiveAttack("A",8),a.receiveAttack("A",9),a.receiveAttack("A",10),a.receiveAttack("B",1),a.receiveAttack("B",2),a.receiveAttack("B",9),a.receiveAttack("B",10),a.receiveAttack("C",1),a.receiveAttack("C",2),a.receiveAttack("C",3),a.receiveAttack("C",4),a.receiveAttack("C",5),a.receiveAttack("C",6),a.receiveAttack("C",7),a.receiveAttack("C",8),a.receiveAttack("C",9),a.receiveAttack("C",10),a.receiveAttack("D",1),a.receiveAttack("D",2),a.receiveAttack("D",3),a.receiveAttack("D",4),a.receiveAttack("D",5),a.receiveAttack("D",6),a.receiveAttack("D",7),a.receiveAttack("D",8),a.receiveAttack("D",9),a.receiveAttack("D",10),a.receiveAttack("E",1),a.receiveAttack("E",2),a.receiveAttack("E",3),a.receiveAttack("E",8),a.receiveAttack("E",9),a.receiveAttack("E",10),a.receiveAttack("F",1),a.receiveAttack("F",2),a.receiveAttack("F",3),a.receiveAttack("F",4),a.receiveAttack("F",5),a.receiveAttack("F",6),a.receiveAttack("F",7),a.receiveAttack("F",8),a.receiveAttack("F",9),a.receiveAttack("F",10),a.receiveAttack("G",1),a.receiveAttack("G",2),a.receiveAttack("G",3),a.receiveAttack("G",4),a.receiveAttack("G",5),a.receiveAttack("G",6),a.receiveAttack("G",7),a.receiveAttack("G",8),a.receiveAttack("G",9),a.receiveAttack("G",10),a.receiveAttack("H",1),a.receiveAttack("H",2),a.receiveAttack("H",3),a.receiveAttack("H",4),a.receiveAttack("H",5),a.receiveAttack("H",6),a.receiveAttack("H",7),a.receiveAttack("H",8),a.receiveAttack("H",9),a.receiveAttack("H",10),a.receiveAttack("I",1),a.receiveAttack("I",2),a.receiveAttack("I",3),a.receiveAttack("I",4),a.receiveAttack("I",5),a.receiveAttack("I",6),a.receiveAttack("I",7),a.receiveAttack("I",8),a.receiveAttack("I",9),a.receiveAttack("I",10),a.receiveAttack("J",1),a.receiveAttack("J",2),a.receiveAttack("J",3),a.receiveAttack("J",4),a.receiveAttack("J",5),a.receiveAttack("J",6);var i=c.makeMove(),s=(i.x,i.y,r(379)),u=r.n(s),l=r(795),d=r.n(l),p=r(569),h=r.n(p),v=r(565),A=r.n(v),f=r(216),g=r.n(f),m=r(589),y=r.n(m),b=r(426),k={};k.styleTagTransform=y(),k.setAttributes=A(),k.insert=h().bind(null,"head"),k.domAPI=d(),k.insertStyleElement=g(),u()(b.Z,k),b.Z&&b.Z.locals&&b.Z.locals;var E=n(),x=n();o("Apina",x),function(e,t){for(var r=document.getElementById("gameboard1"),n=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),r.appendChild(a),a.dataset.id=n[o];for(var c=1;c<11;c++){var i=document.createElement("div");i.classList.add("box1"),i.textContent="",i.dataset.id=a.dataset.id+c,a.appendChild(i)}}for(var s=document.getElementById("gameboard2"),u=function(r){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=n[r];for(var a=function(a){var c=document.createElement("div");c.classList.add("box"),c.textContent="",c.dataset.id=o.dataset.id+a,o.appendChild(c),c.addEventListener("click",(function(){for(var o="",i=0;i<e.ships.length;i++)e.ships[i].occupied.includes(c.dataset.id)&&(o=i);e.receiveAttack(n[r],a,o),e.boardOccupied.includes(c.dataset.id)?c.style.backgroundColor="red":c.style.backgroundColor="blue",console.log(t.enemyBoard.boardOccupied);for(var s=t.makeMove(),u=s.x,l=s.y,d="",p=0;p<e.ships.length;p++)t.enemyBoard.ships[p].occupied.includes(s.result)&&(d=p),console.log(t.enemyBoard.ships[p].occupied);console.log(s.result),console.log("ShipIndex2 is ".concat(d)),t.enemyBoard.receiveAttack(u,l,d);var h=document.getElementsByClassName("box1");t.enemyBoard.boardOccupied.includes(s.result)?h[7].style.backgroundColor="red":h[28].style.backgroundColor="blue",e.loose()}))},c=1;c<11;c++)a(c)},l=0;l<10;l++)u(l)}(x,o("Nemesis",E)),E.placeShip("A",1,5),E.placeShip("B",2,4),E.placeShip("C",3,4),E.placeShip("D",4,3),E.placeShip("E",5,3),E.placeShip("F",5,3),E.placeShip("G",5,2),E.placeShip("H",6,2),E.placeShip("I",6,2),x.placeShip("A",2,5),x.placeShip("B",1,4),x.placeShip("C",4,4),x.placeShip("D",3,3),x.placeShip("E",1,3),x.placeShip("F",1,3),x.placeShip("G",7,2),x.placeShip("H",8,2),x.placeShip("I",6,2),function(e){for(var t=document.getElementsByClassName("box1"),r=0;r<t.length;r++)e.includes(t[r].dataset.id)&&t[r].classList.add("shipBox")}(E.boardOccupied),console.log(E.boardOccupied),console.log(E.ships),console.log(x.boardOccupied),console.log(x.ships)},426:(e,t,r)=>{"use strict";r.d(t,{Z:()=>p});var n=r(537),o=r.n(n),a=r(645),c=r.n(a),i=r(667),s=r.n(i),u=new URL(r(629),r.b),l=c()(o()),d=s()(u);l.push([e.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n.shipBox {\n  background-color: black;\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(89, 132, 182);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE;0BACwB;EACxB,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;AACb;;AAEA;;EAEE,YAAY;AACd;;AAEA,kFAAkF;AAClF;EACE,uBAAuB;AACzB;;AAEA;EACE,mCAAmC;AACrC",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n.shipBox {\n  background-color: black;\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(89, 132, 182);\n}\n'],sourceRoot:""}]);const p=l},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(n)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);n&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */"),c=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([a]).join("\n")}return[t].join("\n")}},666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",i=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),c=new L(n||[]);return a._invoke=function(e,t,r){var n=d;return function(o,a){if(n===h)throw new Error("Generator is already running");if(n===v){if("throw"===o)throw a;return j()}for(r.method=o,r.arg=a;;){var c=r.delegate;if(c){var i=w(c,r);if(i){if(i===A)continue;return i}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===d)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=h;var s=l(e,t,r);if("normal"===s.type){if(n=r.done?v:p,s.arg===A)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=v,r.method="throw",r.arg=s.arg)}}}(e,r,c),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",h="executing",v="completed",A={};function f(){}function g(){}function m(){}var y={};s(y,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(I([])));k&&k!==r&&n.call(k,a)&&(y=k);var E=m.prototype=f.prototype=Object.create(y);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(o,a,c,i){var s=l(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,c,i)}),(function(e){r("throw",e,c,i)})):t.resolve(d).then((function(e){u.value=e,c(u)}),(function(e){return r("throw",e,c,i)}))}i(s.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function w(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,w(e,r),"throw"===r.method))return A;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=l(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,A;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,A):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,A)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function I(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,c=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return c.next=c}}return{next:j}}function j(){return{value:t,done:!0}}return g.prototype=m,s(E,"constructor",m),s(m,"constructor",g),g.displayName=s(m,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s(e,i,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(C.prototype),s(C.prototype,c,(function(){return this})),e.AsyncIterator=C,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var c=new C(u(t,r,n,o),a);return e.isGeneratorFunction(r)?c:c.next().then((function(e){return e.done?e.value:c.next()}))},x(E),s(E,i,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=I,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return i.type="throw",i.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var c=this.tryEntries[a],i=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var s=n.call(c,"catchLoc"),u=n.call(c,"finallyLoc");if(s&&u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var c=a?a.completion:{};return c.type=e,c.arg=t,a?(this.method="next",this.next=a.finallyLoc,A):this.complete(c)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),A},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),S(r),A}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;S(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:I(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),A}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},379:e=>{"use strict";var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],u=n.base?s[0]+n.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=r(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var v=o(h,n);n.byIndex=i,t.splice(i,0,{identifier:d,updater:v,references:1})}c.push(d)}return c}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=r(a[c]);t[i].references--}for(var s=n(e,o),u=0;u<a.length;u++){var l=r(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{"use strict";var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{"use strict";e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},629:(e,t,r)=>{"use strict";e.exports=r.p+"b6a51100243ae5c1ad98.jpeg"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,r(666),r(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,