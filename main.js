(()=>{var n={170:(n,e,t)=>{"use strict";t(666);var r=function(){var n=[],e=[],t=[];return{shots:n,ships:t,boardOccupied:e,placeShip:function(n,r,o,a){var i=function(n,e){for(var t=[],r=[],o=[],a=0;a<n;a++)t.push(a),r.push("x");return{length:n,sunk:!1,hitBoxes:t,destroyed:r,occupied:o,vertical:e,hit:function(n,e){var r=o.indexOf(n+e);t[r]="x"},isSunk:function(){for(var e=0,r=0;r<n;r++)"x"===t[r]&&e++;return e===n&&(this.sunk=!0,!0)}}}(o,a);if(!0===a)for(var c=0;c<i.length;c++){var s=["A","B","C","D","E","F","G","H","I","J"],l=s.indexOf(n);if(console.log("Vertical is ".concat(s[l+c]+r)),e.includes(s[l+c]+r)||!s[l+c])return alert("Illegal vertical placement"),console.log(e),console.log("ILLEGAL VERTICAL"),"illegal";i.occupied.push(s[l+c]+r),e.push(s[l+c]+r)}else for(var u=0;u<i.length;u++){if(console.log("Horizontal x + (y + i) is ".concat(n+(r+u))),e.includes(n+(r+u))||r+u>10)return alert("Illegal horizontal placement"),console.log(e),console.log("ILLEGAL HORIZONTAL"),"illegal";i.occupied.push(n+(r+u)),e.push(n+(r+u))}return t.push(i),i.occupied},receiveAttack:function(r,o,a){return n.push(r+o),e.includes(r+o)?(t[a].hit(r,o),!0===t[a].isSunk()?(console.log("".concat(t.filter((function(n){return!0===n.sunk})).length)),"SHIP HAS BEEN SUNK!"):console.log("It's a hit!")):"missed!"},loose:function(){return t.filter((function(n){return!0===n.sunk})).length===t.length&&alert("All ships destroyed!")}}},o=function(n,e){var t=e;return{name:n,turn:!1,enemyBoard:t,makeMove:function n(){var e="ABCDEFGHIJ",r=e[Math.floor(Math.random()*e.length)],o=Math.floor(10*Math.random()+1),a=r+o;return t.shots.includes(a)?t.shots.includes(a)?n():void 0:{x:r,y:o,result:a}}}},a=t(379),i=t.n(a),c=t(795),s=t.n(c),l=t(569),u=t.n(l),d=t(565),h=t.n(d),p=t(216),f=t.n(p),A=t(589),g=t.n(A),v=t(426),m={};m.styleTagTransform=g(),m.setAttributes=h(),m.insert=u().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=f(),i()(v.Z,m),v.Z&&v.Z.locals&&v.Z.locals;var b=r(),y=r();o("Apina",y),function(n,e){for(var t=document.getElementById("gameboard1"),r=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),t.appendChild(a),a.dataset.id=r[o];for(var i=1;i<11;i++){var c=document.createElement("div");c.classList.add("box1"),c.textContent="",c.dataset.id=a.dataset.id+i,a.appendChild(c)}}for(var s=document.getElementById("gameboard2"),l=function(t){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=r[t];for(var a=function(a){var i=document.createElement("div");i.classList.add("box"),i.textContent="",i.dataset.id=o.dataset.id+a,o.appendChild(i),i.addEventListener("click",(function(){for(var o="",c=0;c<n.ships.length;c++)n.ships[c].occupied.includes(i.dataset.id)&&(o=c);n.receiveAttack(r[t],a,o),n.boardOccupied.includes(i.dataset.id)?i.style.backgroundColor="red":i.style.backgroundColor="blue",setTimeout((function(){for(var t=e.makeMove(),r=t.x,o=t.y,a="",i=0;i<n.ships.length;i++)console.log(e.enemyBoard.ships[i].occupied),e.enemyBoard.ships[i].occupied.includes(t.result)&&(a=i);console.log(t.result),e.enemyBoard.receiveAttack(r,o,a);for(var c=document.getElementsByClassName("box1"),s=0;s<c.length;s++)c[s].dataset.id===t.result&&(e.enemyBoard.boardOccupied.includes(t.result)?c[s].style.backgroundColor="red":c[s].style.backgroundColor="blue")}),850),n.loose(),e.enemyBoard.loose()}))},i=1;i<11;i++)a(i)},u=0;u<10;u++)l(u);document.getElementById("replay").addEventListener("click",(function(){window.location.reload(!0)}));var d=document.getElementsByClassName("box1"),h=document.getElementById("turn"),p=!1;h.textContent="Horizontal",h.addEventListener("click",(function(){p=!p,h.textContent=!1===p?"Horizontal":"Vertical"}));for(var f=0,A=[6,5,4,3,2],g=function(t){d[t].addEventListener("click",(function(){var r=function(n){return function(e){return[e.slice(0,n),e.slice(n)]}},o=r(1)(d[t].dataset.id)[0],a=parseInt(r(1)(d[t].dataset.id)[1],10);function i(n,e){for(var t=0;t<n.length;t++)for(var r=0;r<e.length;r++)if(n[t]===e[r])return!0;return!1}f<A.length?(e.enemyBoard.placeShip(o,a,A[f],p),function(){for(var n=document.getElementsByClassName("box1"),t=0;t<n.length;t++)e.enemyBoard.boardOccupied.includes(n[t].dataset.id)&&n[t].classList.add("shipBox")}(),console.log(e.enemyBoard.ships),console.log(e.enemyBoard.boardOccupied)):alert("Time to play!");var c="ABCDEFGHIJ";if(f<A.length){for(var s=[],l=c[Math.floor(Math.random()*c.length)],u=Math.floor(10*Math.random()+1);;){l=c[Math.floor(Math.random()*c.length)],u=Math.floor(10*Math.random()+1);for(var h=0;h<A.length;h++){var g=["A","B","C","D","E","F","G","H","I","J"],v=g.indexOf(l);s.push(g[v+h]+u),console.log(s)}if(!s.includes(NaN)&&!i(s,n.boardOccupied))break;s.splice(0,s.length),console.log("NYT OLI HUONOJA")}n.placeShip(l,u,A[f],!0),f++,console.log(n.ships)}}))},v=0;v<d.length;v++)g(v)}(y,o("Nemesis",b))},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>h});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),c=t(667),s=t.n(c),l=new URL(t(629),t.b),u=i()(o()),d=s()(l);u.push([n.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n  opacity: 0.7;\n}\n\n#gameboard2 .box:hover {\n  background-color: rgb(59, 59, 59);\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n\np {\n  max-width: 15vw;\n  font-size: 1.4rem;\n  padding: 2vh;\n  background-color: rgba(218, 218, 218, 0.4);\n  border-radius: 15px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE;0BACwB;EACxB,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;EACnC,YAAY;AACd;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,YAAY;EACZ,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;EACX,YAAY;AACd;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA,kFAAkF;AAClF;EACE,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,YAAY;EACZ,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;AACA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,QAAQ;AACV;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,YAAY;EACZ,0CAA0C;EAC1C,mBAAmB;AACrB",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  opacity: 0.7;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n  opacity: 0.7;\n}\n\n#gameboard2 .box:hover {\n  background-color: rgb(59, 59, 59);\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n#gameboard1 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(59, 59, 59);\n}\n\n#replay {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n  padding: 1vh;\n  margin: 2vh 2vh 2vh 2vh;\n  font-size: 1.6rem;\n}\n\n#replay:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n#turn {\n  background-color: rgb(143, 255, 143);\n  border-radius: 5px;\n}\n#turn:hover {\n  background-color: rgb(202, 202, 202);\n}\n\n.chooseShips {\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 2vh;\n}\n\np {\n  max-width: 15vw;\n  font-size: 1.4rem;\n  padding: 2vh;\n  background-color: rgba(218, 218, 218, 0.4);\n  border-radius: 15px;\n}\n'],sourceRoot:""}]);const h=u},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},667:n=>{"use strict";n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},666:n=>{var e=function(n){"use strict";var e,t=Object.prototype,r=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function l(n,e,t,r){var o=e&&e.prototype instanceof g?e:g,a=Object.create(o.prototype),i=new j(r||[]);return a._invoke=function(n,e,t){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw a;return I()}for(t.method=o,t.arg=a;;){var i=t.delegate;if(i){var c=w(i,t);if(c){if(c===A)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(r===d)throw r=f,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r=p;var s=u(n,e,t);if("normal"===s.type){if(r=t.done?f:h,s.arg===A)continue;return{value:s.arg,done:t.done}}"throw"===s.type&&(r=f,t.method="throw",t.arg=s.arg)}}}(n,t,i),a}function u(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var d="suspendedStart",h="suspendedYield",p="executing",f="completed",A={};function g(){}function v(){}function m(){}var b={};s(b,a,(function(){return this}));var y=Object.getPrototypeOf,E=y&&y(y(O([])));E&&E!==t&&r.call(E,a)&&(b=E);var C=m.prototype=g.prototype=Object.create(b);function x(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function B(n,e){function t(o,a,i,c){var s=u(n[o],n,a);if("throw"!==s.type){var l=s.arg,d=l.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(n){t("next",n,i,c)}),(function(n){t("throw",n,i,c)})):e.resolve(d).then((function(n){l.value=n,i(l)}),(function(n){return t("throw",n,i,c)}))}c(s.arg)}var o;this._invoke=function(n,r){function a(){return new e((function(e,o){t(n,r,e,o)}))}return o=o?o.then(a,a):a()}}function w(n,t){var r=n.iterator[t.method];if(r===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=e,w(n,t),"throw"===t.method))return A;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var o=u(r,n.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,A;var a=o.arg;return a?a.done?(t[n.resultName]=a.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=e),t.delegate=null,A):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,A)}function k(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function L(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function j(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(k,this),this.reset(!0)}function O(n){if(n){var t=n[a];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var o=-1,i=function t(){for(;++o<n.length;)if(r.call(n,o))return t.value=n[o],t.done=!1,t;return t.value=e,t.done=!0,t};return i.next=i}}return{next:I}}function I(){return{value:e,done:!0}}return v.prototype=m,s(C,"constructor",m),s(m,"constructor",v),v.displayName=s(m,c,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,s(n,c,"GeneratorFunction")),n.prototype=Object.create(C),n},n.awrap=function(n){return{__await:n}},x(B.prototype),s(B.prototype,i,(function(){return this})),n.AsyncIterator=B,n.async=function(e,t,r,o,a){void 0===a&&(a=Promise);var i=new B(l(e,t,r,o),a);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},x(C),s(C,c,"Generator"),s(C,a,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=O,j.prototype={constructor:j,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!n)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=e)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function o(r,o){return c.type="throw",c.arg=n,t.next=r,o&&(t.method="next",t.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(n,e){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,A):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),A},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),L(t),A}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;L(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,r){return this.delegate={iterator:O(n),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=e),A}},n}(n.exports);try{regeneratorRuntime=e}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var h=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var s=r(n,o),l=0;l<a.length;l++){var u=t(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=s}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},629:(n,e,t)=>{"use strict";n.exports=t.p+"b6a51100243ae5c1ad98.jpeg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t(666),t(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVN3RCxJQUM1RWQsT0FBT2dCLGVBQWUxRCxFQUFTd0QsRUFBSyxDQUFFRyxZQUFZLEVBQU02SyxJQUFLRixFQUFXOUssTUNKM0VzSyxFQUFvQlcsRUFBSSxXQUN2QixHQUEwQixpQkFBZjNELFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT2hRLE1BQVEsSUFBSWlRLFNBQVMsY0FBYixHQUNkLE1BQU8rQixHQUNSLEdBQXNCLGlCQUFYdk8sT0FBcUIsT0FBT0EsUUFMakIsR0NBeEJ1UCxFQUFvQlMsRUFBSSxDQUFDaEwsRUFBS21MLElBQVVoTSxPQUFPQyxVQUFVRSxlQUFlcUQsS0FBSzNDLEVBQUttTCxHLE1DQWxGLElBQUlDLEVBQ0FiLEVBQW9CVyxFQUFFRyxnQkFBZUQsRUFBWWIsRUFBb0JXLEVBQUVqUSxTQUFXLElBQ3RGLElBQUkxQixFQUFXZ1IsRUFBb0JXLEVBQUUzUixTQUNyQyxJQUFLNlIsR0FBYTdSLElBQ2JBLEVBQVMrUixnQkFDWkYsRUFBWTdSLEVBQVMrUixjQUFjQyxNQUMvQkgsR0FBVyxDQUNmLElBQUlJLEVBQVVqUyxFQUFTa1MscUJBQXFCLFVBQ3pDRCxFQUFRL1UsU0FBUTJVLEVBQVlJLEVBQVFBLEVBQVEvVSxPQUFTLEdBQUc4VSxLQUs3RCxJQUFLSCxFQUFXLE1BQU0sSUFBSTNKLE1BQU0seURBQ2hDMkosRUFBWUEsRUFBVWpOLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGb00sRUFBb0JtQixFQUFJTixHLEdDZnhCYixFQUFvQjVQLEVBQUlwQixTQUFTb1MsU0FBV2hMLEtBQUsxRixTQUFTMlEsS0NHMURyQixFQUFvQixLQUNNQSxFQUFvQixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lbG9naWMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZG9tLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cyAqL1xuXG4vKiBTaGlwcyBuZWVkZWQ6XG4xIHggQ2Fycmllciwgc2l6ZSA1XG4yIHggQmF0dGxlc2hpcCwgc2l6ZSA0XG4zIHggRGVzdHJveWVyLCBzaXplIDNcbjMgeCBQYXRyb2wgQm9hdCwgc2l6ZSAyICAqL1xuXG5leHBvcnQgY29uc3Qgc2hpcCA9IChsZW5ndGgsIHZlcnRpY2FsKSA9PiB7XG4gIGNvbnN0IGhpdEJveGVzID0gW107XG4gIGNvbnN0IGRlc3Ryb3llZCA9IFtdO1xuICBjb25zdCBvY2N1cGllZCA9IFtdO1xuICBjb25zdCBzdW5rID0gZmFsc2U7XG4gIC8vIGNvbnN0IHZlcnRpY2FsID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBoaXRCb3hlcy5wdXNoKGkpO1xuICAgIGRlc3Ryb3llZC5wdXNoKFwieFwiKTtcbiAgfVxuXG4gIC8vIERldGVybWluZXMgaWYgc2hpcCBoYXMgYmVlbiBoaXRcbiAgZnVuY3Rpb24gaGl0KHgsIHkpIHtcbiAgICBjb25zdCBoaXRQb2ludCA9IG9jY3VwaWVkLmluZGV4T2YoeCArIHkpO1xuICAgIGhpdEJveGVzW2hpdFBvaW50XSA9IFwieFwiO1xuICB9XG5cbiAgLy8gRGV0ZXJtaW5lcyBpZiB0aGUgc2hpcCBoYXMgYmVlbiBzdW5rXG4gIGZ1bmN0aW9uIGlzU3VuaygpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChoaXRCb3hlc1tpXSA9PT0gXCJ4XCIpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSBsZW5ndGgpIHtcbiAgICAgIHRoaXMuc3VuayA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gTk9URTogQ2xlYW4gdXAgdXNlbGVzcyByZXR1cm5zXG4gIHJldHVybiB7XG4gICAgbGVuZ3RoLFxuICAgIHN1bmssXG4gICAgaGl0Qm94ZXMsXG4gICAgZGVzdHJveWVkLFxuICAgIG9jY3VwaWVkLFxuICAgIHZlcnRpY2FsLFxuICAgIGhpdCxcbiAgICBpc1N1bmssXG4gIH07XG59O1xuLy8gIG1vZHVsZS5leHBvcnRzID0gc2hpcDtcblxuZXhwb3J0IGNvbnN0IGdhbWVib2FyZCA9ICgpID0+IHtcbiAgY29uc3Qgc2hvdHMgPSBbXTtcbiAgY29uc3QgYm9hcmRPY2N1cGllZCA9IFtdO1xuICBjb25zdCBzaGlwcyA9IFtdO1xuXG4gIC8vIENhbGxzIHNoaXAoKSBmdW5jdGlvbiBhbmQgcGxhY2VzIHNoaXAgb24gYm9hcmRcbiAgZnVuY3Rpb24gcGxhY2VTaGlwKHgsIHksIGxlbmd0aCwgdmVydGljYWwpIHtcbiAgICBjb25zdCBuZXdTaGlwID0gc2hpcChsZW5ndGgsIHZlcnRpY2FsKTtcbiAgICBpZiAodmVydGljYWwgPT09IHRydWUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhcnIgPSBbXCJBXCIsIFwiQlwiLCBcIkNcIiwgXCJEXCIsIFwiRVwiLCBcIkZcIiwgXCJHXCIsIFwiSFwiLCBcIklcIiwgXCJKXCJdO1xuICAgICAgICBjb25zdCBpbmRleFggPSBhcnIuaW5kZXhPZih4KTtcbiAgICAgICAgY29uc29sZS5sb2coYFZlcnRpY2FsIGlzICR7YXJyW2luZGV4WCArIGldICsgeX1gKTtcbiAgICAgICAgaWYgKGJvYXJkT2NjdXBpZWQuaW5jbHVkZXMoYXJyW2luZGV4WCArIGldICsgeSkgfHwgIWFycltpbmRleFggKyBpXSkge1xuICAgICAgICAgIGFsZXJ0KFwiSWxsZWdhbCB2ZXJ0aWNhbCBwbGFjZW1lbnRcIik7XG4gICAgICAgICAgY29uc29sZS5sb2coYm9hcmRPY2N1cGllZCk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJJTExFR0FMIFZFUlRJQ0FMXCIpO1xuICAgICAgICAgIC8vIHBsYWNlU2hpcCh4LCB5LCBsZW5ndGgsIHZlcnRpY2FsKTtcbiAgICAgICAgICByZXR1cm4gXCJpbGxlZ2FsXCI7XG4gICAgICAgIH1cbiAgICAgICAgbmV3U2hpcC5vY2N1cGllZC5wdXNoKGFycltpbmRleFggKyBpXSArIHkpO1xuICAgICAgICBib2FyZE9jY3VwaWVkLnB1c2goYXJyW2luZGV4WCArIGldICsgeSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zb2xlLmxvZyhgSG9yaXpvbnRhbCB4ICsgKHkgKyBpKSBpcyAke3ggKyAoeSArIGkpfWApO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgeSBpcyAke3l9YCk7XG4gICAgICAgIGlmIChib2FyZE9jY3VwaWVkLmluY2x1ZGVzKHggKyAoeSArIGkpKSB8fCB5ICsgaSA+IDEwKSB7XG4gICAgICAgICAgYWxlcnQoXCJJbGxlZ2FsIGhvcml6b250YWwgcGxhY2VtZW50XCIpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGJvYXJkT2NjdXBpZWQpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiSUxMRUdBTCBIT1JJWk9OVEFMXCIpO1xuICAgICAgICAgIC8vICAgcGxhY2VTaGlwKHgsIHksIGxlbmd0aCwgdmVydGljYWwpO1xuICAgICAgICAgIHJldHVybiBcImlsbGVnYWxcIjtcbiAgICAgICAgfVxuICAgICAgICBuZXdTaGlwLm9jY3VwaWVkLnB1c2goeCArICh5ICsgaSkpO1xuICAgICAgICBib2FyZE9jY3VwaWVkLnB1c2goeCArICh5ICsgaSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBzaGlwcy5wdXNoKG5ld1NoaXApO1xuICAgIHJldHVybiBuZXdTaGlwLm9jY3VwaWVkO1xuICB9XG5cbiAgLy8gUmVjZWl2ZSBlbmVteSBzaG90IGFuZCBkZXRlcm1pbmUgaWYgaXQncyBhbWlzcyBvciBoaXRcbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9ICh4LCB5LCBzaGlwSW5kZXgpID0+IHtcbiAgICBzaG90cy5wdXNoKHggKyB5KTtcbiAgICBpZiAoIWJvYXJkT2NjdXBpZWQuaW5jbHVkZXMoeCArIHkpKSB7XG4gICAgICByZXR1cm4gXCJtaXNzZWQhXCI7XG4gICAgfVxuICAgIHNoaXBzW3NoaXBJbmRleF0uaGl0KHgsIHkpO1xuICAgIGlmIChzaGlwc1tzaGlwSW5kZXhdLmlzU3VuaygpID09PSB0cnVlKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtzaGlwcy5maWx0ZXIoKHsgc3VuayB9KSA9PiBzdW5rID09PSB0cnVlKS5sZW5ndGh9YCk7XG4gICAgICByZXR1cm4gXCJTSElQIEhBUyBCRUVOIFNVTkshXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiSXQncyBhIGhpdCFcIik7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gdG8gaW5mb3JtIGlmIGV2ZXJ5IHNoaXAgaGFzIGJlZW4gc3Vua1xuICBmdW5jdGlvbiBsb29zZSgpIHtcbiAgICBjb25zdCBzdW5rZW5TaGlwcyA9IHNoaXBzLmZpbHRlcigoeyBzdW5rIH0pID0+IHN1bmsgPT09IHRydWUpLmxlbmd0aDtcbiAgICBpZiAoc3Vua2VuU2hpcHMgPT09IHNoaXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGFsZXJ0KFwiQWxsIHNoaXBzIGRlc3Ryb3llZCFcIik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE5PVEU6IENsZWFyIHVzZWxlc3MgcmV0dXJuc1xuICByZXR1cm4ge1xuICAgIHNob3RzLFxuICAgIHNoaXBzLFxuICAgIGJvYXJkT2NjdXBpZWQsXG4gICAgcGxhY2VTaGlwLFxuICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgbG9vc2UsXG4gIH07XG59O1xuLy8gIG1vZHVsZS5leHBvcnRzID0gZ2FtZWJvYXJkO1xuXG5leHBvcnQgY29uc3QgUGxheWVyID0gKG5hbWUsIGVuZW15KSA9PiB7XG4gIGNvbnN0IHR1cm4gPSBmYWxzZTtcbiAgY29uc3QgZW5lbXlCb2FyZCA9IGVuZW15O1xuXG4gIC8vIEVuZW15IEFJXG4gIGZ1bmN0aW9uIG1ha2VNb3ZlKCkge1xuICAgIGNvbnN0IGFscGhhYmV0ID0gXCJBQkNERUZHSElKXCI7XG4gICAgY29uc3QgeCA9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCldO1xuICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcbiAgICBjb25zdCByZXN1bHQgPSB4ICsgeTtcbiAgICBpZiAoIWVuZW15Qm9hcmQuc2hvdHMuaW5jbHVkZXMocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHsgeCwgeSwgcmVzdWx0IH07XG4gICAgfVxuICAgIGlmIChlbmVteUJvYXJkLnNob3RzLmluY2x1ZGVzKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiBtYWtlTW92ZSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgdHVybixcbiAgICBlbmVteUJvYXJkLFxuICAgIG1ha2VNb3ZlLFxuICB9O1xufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1pbXBvcnQtbW9kdWxlLWV4cG9ydHMgKi9cblxuaW1wb3J0IFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCI7XG5pbXBvcnQgZ2FtZWJvYXJkR3JpZCwgeyBkcmF3U2hpcHMgfSBmcm9tIFwiLi9kb20uanNcIjtcbmltcG9ydCB7IHNoaXAsIGdhbWVib2FyZCwgUGxheWVyIH0gZnJvbSBcIi4vZ2FtZWxvZ2ljLmpzXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jb25zdCBib2FyZDEgPSBnYW1lYm9hcmQoKTtcbmNvbnN0IGJvYXJkMiA9IGdhbWVib2FyZCgpO1xuY29uc3QgcGxheWVyMSA9IFBsYXllcihcIkFwaW5hXCIsIGJvYXJkMik7XG5jb25zdCBwbGF5ZXJDb20gPSBQbGF5ZXIoXCJOZW1lc2lzXCIsIGJvYXJkMSk7XG5nYW1lYm9hcmRHcmlkKGJvYXJkMiwgcGxheWVyQ29tKTtcblxuLyogYm9hcmQxLnBsYWNlU2hpcChcIkFcIiwgMSwgNiwgZmFsc2UpO1xuYm9hcmQxLnBsYWNlU2hpcChcIkJcIiwgMiwgNSwgZmFsc2UpO1xuYm9hcmQxLnBsYWNlU2hpcChcIkZcIiwgNywgMywgZmFsc2UpO1xuYm9hcmQxLnBsYWNlU2hpcChcIkdcIiwgMywgMiwgdHJ1ZSk7XG5ib2FyZDEucGxhY2VTaGlwKFwiSlwiLCA2LCAyLCBmYWxzZSk7ICovXG5cbi8qIGJvYXJkMi5wbGFjZVNoaXAoXCJBXCIsIDIsIDUsIGZhbHNlKTtcbmJvYXJkMi5wbGFjZVNoaXAoXCJCXCIsIDEsIDQsIGZhbHNlKTtcbmJvYXJkMi5wbGFjZVNoaXAoXCJEXCIsIDMsIDMsIGZhbHNlKTtcbmJvYXJkMi5wbGFjZVNoaXAoXCJIXCIsIDgsIDIsIGZhbHNlKTtcbmJvYXJkMi5wbGFjZVNoaXAoXCJJXCIsIDMsIDYsIGZhbHNlKTsgKi9cblxuLy8gZHJhd1NoaXBzKGJvYXJkMS5ib2FyZE9jY3VwaWVkKTtcbi8vIGNvbnNvbGUubG9nKGJvYXJkMS5zaGlwcyk7XG4vLyBjb25zb2xlLmxvZyhib2FyZDEuYm9hcmRPY2N1cGllZCk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdhbWVib2FyZEdyaWQoZ2FtZWJvYXJkLCBQbGF5ZXIpIHtcbiAgY29uc3QgZ3JpZDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVib2FyZDFcIik7XG4gIGNvbnN0IGluZGV4TGV0dGVycyA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIl07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcm93LmNsYXNzTGlzdC5hZGQoXCJyb3dcIik7XG4gICAgZ3JpZDEuYXBwZW5kQ2hpbGQocm93KTtcbiAgICByb3cuZGF0YXNldC5pZCA9IGluZGV4TGV0dGVyc1tpXTtcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IDExOyBqKyspIHtcbiAgICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBib3guY2xhc3NMaXN0LmFkZChcImJveDFcIik7XG4gICAgICBib3gudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgYm94LmRhdGFzZXQuaWQgPSByb3cuZGF0YXNldC5pZCArIGo7XG4gICAgICByb3cuYXBwZW5kQ2hpbGQoYm94KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBncmlkMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZWJvYXJkMlwiKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICByb3cuY2xhc3NMaXN0LmFkZChcInJvd1wiKTtcbiAgICBncmlkMi5hcHBlbmRDaGlsZChyb3cpO1xuICAgIHJvdy5kYXRhc2V0LmlkID0gaW5kZXhMZXR0ZXJzW2ldO1xuICAgIGZvciAobGV0IGogPSAxOyBqIDwgMTE7IGorKykge1xuICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJveC5jbGFzc0xpc3QuYWRkKFwiYm94XCIpO1xuICAgICAgYm94LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIGJveC5kYXRhc2V0LmlkID0gcm93LmRhdGFzZXQuaWQgKyBqO1xuICAgICAgcm93LmFwcGVuZENoaWxkKGJveCk7XG4gICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgbGV0IHNoaXBJbmRleCA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgZ2FtZWJvYXJkLnNoaXBzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgaWYgKGdhbWVib2FyZC5zaGlwc1t4XS5vY2N1cGllZC5pbmNsdWRlcyhib3guZGF0YXNldC5pZCkpIHtcbiAgICAgICAgICAgIHNoaXBJbmRleCA9IHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGluZGV4TGV0dGVyc1tpXSwgaiwgc2hpcEluZGV4KTtcbiAgICAgICAgLy8gaWYgKCFcIm1pc3NlZFwiKSB7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuYm9hcmRPY2N1cGllZC5pbmNsdWRlcyhib3guZGF0YXNldC5pZCkpIHtcbiAgICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibHVlXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBERVRFUk1JTklORyBDT01QVVRFUlMgQUNUSU9OXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1vdmUgPSBQbGF5ZXIubWFrZU1vdmUoKTtcbiAgICAgICAgICBjb25zdCBhID0gbW92ZS54O1xuICAgICAgICAgIGNvbnN0IGIgPSBtb3ZlLnk7XG4gICAgICAgICAgbGV0IHNoaXBJbmRleDIgPSBcIlwiO1xuICAgICAgICAgIGZvciAobGV0IGggPSAwOyBoIDwgZ2FtZWJvYXJkLnNoaXBzLmxlbmd0aDsgaCsrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhQbGF5ZXIuZW5lbXlCb2FyZC5zaGlwc1toXS5vY2N1cGllZCk7XG4gICAgICAgICAgICBpZiAoUGxheWVyLmVuZW15Qm9hcmQuc2hpcHNbaF0ub2NjdXBpZWQuaW5jbHVkZXMobW92ZS5yZXN1bHQpKSB7XG4gICAgICAgICAgICAgIHNoaXBJbmRleDIgPSBoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhtb3ZlLnJlc3VsdCk7XG4gICAgICAgICAgUGxheWVyLmVuZW15Qm9hcmQucmVjZWl2ZUF0dGFjayhhLCBiLCBzaGlwSW5kZXgyKTtcbiAgICAgICAgICBjb25zdCBib3gxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJveDFcIik7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3gxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYm94MVtpXS5kYXRhc2V0LmlkID09PSBtb3ZlLnJlc3VsdCkge1xuICAgICAgICAgICAgICBpZiAoUGxheWVyLmVuZW15Qm9hcmQuYm9hcmRPY2N1cGllZC5pbmNsdWRlcyhtb3ZlLnJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBib3gxW2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94MVtpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsdWVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgODUwKTtcbiAgICAgICAgZ2FtZWJvYXJkLmxvb3NlKCk7XG4gICAgICAgIFBsYXllci5lbmVteUJvYXJkLmxvb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLy8gUkVQTEFZIEJVVFRPTlxuICBjb25zdCByZXBsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlcGxheVwiKTtcbiAgcmVwbGF5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgfSk7XG5cbiAgLy8gUkVOREVSIEZVTkNUSU9OIEZPUiBTSElQU1xuICBmdW5jdGlvbiBkcmF3U2hpcHMoKSB7XG4gICAgY29uc3QgYm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYm94MVwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoUGxheWVyLmVuZW15Qm9hcmQuYm9hcmRPY2N1cGllZC5pbmNsdWRlcyhib3hlc1tpXS5kYXRhc2V0LmlkKSkge1xuICAgICAgICBib3hlc1tpXS5jbGFzc0xpc3QuYWRkKFwic2hpcEJveFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBQTEFDSU5HIFRIRSBTSElQUyBBTkQgVFVSTiBCVVRUT05cbiAgY29uc3QgYm94MSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJib3gxXCIpO1xuICBjb25zdCB0dXJuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0dXJuXCIpO1xuICBsZXQgdmVydGljYWwgPSBmYWxzZTtcbiAgdHVybi50ZXh0Q29udGVudCA9IFwiSG9yaXpvbnRhbFwiO1xuICB0dXJuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgdmVydGljYWwgPSAhdmVydGljYWw7XG4gICAgaWYgKHZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgdHVybi50ZXh0Q29udGVudCA9IFwiSG9yaXpvbnRhbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0dXJuLnRleHRDb250ZW50ID0gXCJWZXJ0aWNhbFwiO1xuICAgIH1cbiAgfSk7XG4gIGxldCBzaGlwQ291bnRlciA9IDA7XG4gIGNvbnN0IHNoaXBMZW5ndGggPSBbNiwgNSwgNCwgMywgMl07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYm94MS5sZW5ndGg7IGkrKykge1xuICAgIGJveDFbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNwbGl0QXQgPSAoaW5kZXgpID0+ICh4KSA9PiBbeC5zbGljZSgwLCBpbmRleCksIHguc2xpY2UoaW5kZXgpXTtcbiAgICAgIGNvbnN0IHggPSBzcGxpdEF0KDEpKGJveDFbaV0uZGF0YXNldC5pZClbMF07XG4gICAgICBjb25zdCB5ID0gcGFyc2VJbnQoc3BsaXRBdCgxKShib3gxW2ldLmRhdGFzZXQuaWQpWzFdLCAxMCk7XG4gICAgICBpZiAoc2hpcENvdW50ZXIgPCBzaGlwTGVuZ3RoLmxlbmd0aCkge1xuICAgICAgICBQbGF5ZXIuZW5lbXlCb2FyZC5wbGFjZVNoaXAoeCwgeSwgc2hpcExlbmd0aFtzaGlwQ291bnRlcl0sIHZlcnRpY2FsKTtcbiAgICAgICAgZHJhd1NoaXBzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFBsYXllci5lbmVteUJvYXJkLnNoaXBzKTtcbiAgICAgICAgY29uc29sZS5sb2coUGxheWVyLmVuZW15Qm9hcmQuYm9hcmRPY2N1cGllZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydChcIlRpbWUgdG8gcGxheSFcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIFBMQUNJTkcgRU5FTVkgU0hJUFNcbiAgICAgIGZ1bmN0aW9uIGZpbmRDb21tb24oYXJyYXkxLCBhcnJheTIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheTEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFycmF5Mi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGFycmF5MVtpXSA9PT0gYXJyYXkyW2pdKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBhbHBoYWJldCA9IFwiQUJDREVGR0hJSlwiO1xuICAgICAgY29uc3Qgc2hpcE9yaWVudCA9IHRydWU7IC8vIE1hdGgucmFuZG9tKCkgPCAwLjU7XG4gICAgICAvLyBjb25zdCBzaGlweCA9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCldO1xuICAgICAgLy8gY29uc3Qgc2hpcHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcblxuICAgICAgaWYgKHNoaXBDb3VudGVyIDwgc2hpcExlbmd0aC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNoaXBPcmllbnQgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zdCBzaGlwVGVtcCA9IFtdO1xuICAgICAgICAgIGxldCBzaGlweCA9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCldO1xuICAgICAgICAgIGxldCBzaGlweSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIDEgKyAxKSArIDEpO1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBzaGlweCA9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCldO1xuICAgICAgICAgICAgc2hpcHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBhcnIgPSBbXCJBXCIsIFwiQlwiLCBcIkNcIiwgXCJEXCIsIFwiRVwiLCBcIkZcIiwgXCJHXCIsIFwiSFwiLCBcIklcIiwgXCJKXCJdO1xuICAgICAgICAgICAgICBjb25zdCBpbmRleFggPSBhcnIuaW5kZXhPZihzaGlweCk7XG5cbiAgICAgICAgICAgICAgc2hpcFRlbXAucHVzaChhcnJbaW5kZXhYICsgaV0gKyBzaGlweSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNoaXBUZW1wKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBzaGlwVGVtcC5pbmNsdWRlcyhOYU4pIHx8XG4gICAgICAgICAgICAgIGZpbmRDb21tb24oc2hpcFRlbXAsIGdhbWVib2FyZC5ib2FyZE9jY3VwaWVkKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHNoaXBUZW1wLnNwbGljZSgwLCBzaGlwVGVtcC5sZW5ndGgpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5ZVCBPTEkgSFVPTk9KQVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAoXG4gICAgICAgICAgICBzaGlweCxcbiAgICAgICAgICAgIHNoaXB5LFxuICAgICAgICAgICAgc2hpcExlbmd0aFtzaGlwQ291bnRlcl0sXG4gICAgICAgICAgICBzaGlwT3JpZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzaGlwQ291bnRlcisrO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGdhbWVib2FyZC5zaGlwcyk7XG4gICAgICAgIH1cbiAgICAgICAgLyogICAgICBjb25zdCBhbHBoYWJldCA9IFwiQUJDREVGR0hJSlwiO1xuICAgICAgbGV0IHNoaXBPcmllbnQgPSBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICAgICAgbGV0IHNoaXB4ID0gYWxwaGFiZXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKV07XG4gICAgICBsZXQgc2hpcHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHggKyB5O1xuICAgICAgbGV0IGFwcHJvdmVkUG9zID0gMTtcblxuICAgICAgaWYgKHNoaXBDb3VudGVyIDwgc2hpcExlbmd0aC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNoaXBPcmllbnQgPT09IHRydWUpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIl07XG4gICAgICAgICAgICBjb25zdCBpbmRleFggPSBhcnIuaW5kZXhPZih4KTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgZ2FtZWJvYXJkLmJvYXJkT2NjdXBpZWQuaW5jbHVkZXMoYXJyW2luZGV4WCArIGldICsgeSkgfHxcbiAgICAgICAgICAgICAgIWFycltpbmRleFggKyBpXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcImlsbGVnYWxcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcHJvdmVkUG9zKys7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhcHByb3ZlZFBvcyk7XG4gICAgICAgICAgICBpZiAoYXBwcm92ZWRQb3MgPT09IHNoaXBMZW5ndGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAoXG4gICAgICAgICAgICAgICAgc2hpcHgsXG4gICAgICAgICAgICAgICAgc2hpcHksXG4gICAgICAgICAgICAgICAgc2hpcExlbmd0aFtzaGlwQ291bnRlcl0sXG4gICAgICAgICAgICAgICAgc2hpcE9yaWVudFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBhcHByb3ZlZFBvcyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5ib2FyZE9jY3VwaWVkLmluY2x1ZGVzKHggKyAoeSArIGkpKSB8fCB5ICsgaSA+IDEwKSB7XG4gICAgICAgICAgICAgIGFsZXJ0KFwiSWxsZWdhbCBob3Jpem9udGFsIHBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiaWxsZWdhbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXBwcm92ZWRQb3MrKztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFwcHJvdmVkUG9zKTtcbiAgICAgICAgICAgIGlmIChhcHByb3ZlZFBvcyA9PT0gc2hpcExlbmd0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChcbiAgICAgICAgICAgICAgICBzaGlweCxcbiAgICAgICAgICAgICAgICBzaGlweSxcbiAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoW3NoaXBDb3VudGVyXSxcbiAgICAgICAgICAgICAgICBzaGlwT3JpZW50XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcHgsIHNoaXB5LCBzaGlwTGVuZ3RoW3NoaXBDb3VudGVyXSwgc2hpcE9yaWVudCk7XG5cbiAgICAgICAgaWYgKFwiaWxsZWdhbFwiKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJQbGFjZW1lbnQgd2FzIGlsbGVnYWw6IG5ldyBvbmU6XCIpO1xuICAgICAgICAgIHNoaXBPcmllbnQgPSBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICAgICAgICAgIHNoaXB4ID0gYWxwaGFiZXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKV07XG4gICAgICAgICAgc2hpcHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcbiAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKFxuICAgICAgICAgICAgc2hpcHgsXG4gICAgICAgICAgICBzaGlweSxcbiAgICAgICAgICAgIHNoaXBMZW5ndGhbc2hpcENvdW50ZXJdLFxuICAgICAgICAgICAgc2hpcE9yaWVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcENvdW50ZXIrKztcbiAgICAgICAgY29uc29sZS5sb2coZ2FtZWJvYXJkLnNoaXBzKTtcbiAgICAgICovXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTaGlwcyhhcnJheSkge1xuICBjb25zdCBib3hlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJib3gxXCIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycmF5LmluY2x1ZGVzKGJveGVzW2ldLmRhdGFzZXQuaWQpKSB7XG4gICAgICBib3hlc1tpXS5jbGFzc0xpc3QuYWRkKFwic2hpcEJveFwiKTtcbiAgICB9XG4gIH1cbn1cblxuLyogV0hBVCBJIFRSSUVEIEZPUiBFTkVNWSBTSElQIFBMQUNFTUVOVDpcbiAgICAgIC8vIFBMQUNJTkcgRU5FTVkgU0hJUFNcbiAgICAgIGNvbnN0IGFscGhhYmV0ID0gXCJBQkNERUZHSElKXCI7XG4gICAgICBsZXQgc2hpcE9yaWVudCA9IE1hdGgucmFuZG9tKCkgPCAwLjU7XG4gICAgICBsZXQgc2hpcHggPSBhbHBoYWJldFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpXTtcbiAgICAgIGxldCBzaGlweSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIDEgKyAxKSArIDEpO1xuICAgICAgLy8gY29uc3QgcmVzdWx0ID0geCArIHk7XG5cbiAgICAgIGlmIChzaGlwQ291bnRlciA8IHNoaXBMZW5ndGgubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzaGlwT3JpZW50ID09PSB0cnVlKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSBbXCJBXCIsIFwiQlwiLCBcIkNcIiwgXCJEXCIsIFwiRVwiLCBcIkZcIiwgXCJHXCIsIFwiSFwiLCBcIklcIiwgXCJKXCJdO1xuICAgICAgICAgICAgY29uc3QgaW5kZXhYID0gYXJyLmluZGV4T2YoeCk7XG5cbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgIHNoaXBPcmllbnQgPSBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICAgICAgICAgICAgICBzaGlweCA9IGFscGhhYmV0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCldO1xuICAgICAgICAgICAgICBzaGlweSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIDEgKyAxKSArIDEpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvb3Bpc3NhIG9sbGFhblwiKTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFnYW1lYm9hcmQuYm9hcmRPY2N1cGllZC5pbmNsdWRlcyhhcnJbaW5kZXhYICsgaV0gKyB5KSB8fFxuICAgICAgICAgICAgICAgIGFycltpbmRleFggKyBpXVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKFxuICAgICAgICAgICAgICAgICAgc2hpcHgsXG4gICAgICAgICAgICAgICAgICBzaGlweSxcbiAgICAgICAgICAgICAgICAgIHNoaXBMZW5ndGhbc2hpcENvdW50ZXJdLFxuICAgICAgICAgICAgICAgICAgc2hpcE9yaWVudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJWQVBBVVMhXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5ib2FyZE9jY3VwaWVkLmluY2x1ZGVzKHggKyAoeSArIGkpKSB8fCB5ICsgaSA+IDEwKSB7XG4gICAgICAgICAgICAgIGFsZXJ0KFwiSWxsZWdhbCBob3Jpem9udGFsIHBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiaWxsZWdhbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChcbiAgICAgICAgICAgICAgc2hpcHgsXG4gICAgICAgICAgICAgIHNoaXB5LFxuICAgICAgICAgICAgICBzaGlwTGVuZ3RoW3NoaXBDb3VudGVyXSxcbiAgICAgICAgICAgICAgc2hpcE9yaWVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlweCwgc2hpcHksIHNoaXBMZW5ndGhbc2hpcENvdW50ZXJdLCBzaGlwT3JpZW50KTtcblxuICAgICAgICAgaWYgKFwiaWxsZWdhbFwiKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJQbGFjZW1lbnQgd2FzIGlsbGVnYWw6IG5ldyBvbmU6XCIpO1xuICAgICAgICAgIHNoaXBPcmllbnQgPSBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICAgICAgICAgIHNoaXB4ID0gYWxwaGFiZXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKV07XG4gICAgICAgICAgc2hpcHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSAxICsgMSkgKyAxKTtcbiAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKFxuICAgICAgICAgICAgc2hpcHgsXG4gICAgICAgICAgICBzaGlweSxcbiAgICAgICAgICAgIHNoaXBMZW5ndGhbc2hpcENvdW50ZXJdLFxuICAgICAgICAgICAgc2hpcE9yaWVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcENvdW50ZXIrKztcbiAgICAgICAgY29uc29sZS5sb2coZ2FtZWJvYXJkLnNoaXBzKTsgKi9cbi8vIH1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCJiZ2ltZy5qcGVnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBmb250LWZhbWlseTogXFxcIlJvYWQgcmFnZVxcXCIsIGN1cnNpdmU7XFxuICBmb250LXNpemU6IGxhcmdlcjtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG59XFxuXFxuI2dhbWVib2FyZHMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdhcDogM3Z3O1xcbn1cXG5cXG4jZ2FtZWJvYXJkMSxcXG4jZ2FtZWJvYXJkMiB7XFxuICAvKiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Ki9cXG4gIHdpZHRoOiAzM3Z3O1xcbiAgaGVpZ2h0OiAzM3Z3O1xcbn1cXG5oMiB7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDN2aCAzdmggM3ZoIDN2aDtcXG59XFxuXFxuI2dhbWVib2FyZDIgLmJveCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODksIDEzMiwgMTgyKTtcXG4gIG9wYWNpdHk6IDAuNztcXG59XFxuXFxuLnJvdyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBtaW4taGVpZ2h0OiAzLjN2dztcXG59XFxuXFxuLmJveCxcXG4uYm94MSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODksIDEzMiwgMTgyKTtcXG4gIG9wYWNpdHk6IDAuNztcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCBibGFjaztcXG4gIHdpZHRoOiAxMHZ3O1xcbiAgb3BhY2l0eTogMC43O1xcbn1cXG5cXG4jZ2FtZWJvYXJkMiAuYm94OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgNTksIDU5KTtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuXFxuLyogUHJvYmFibHkgbmVlZCB0byBzZXBhcmF0ZSB0aGVzZSBsYXRlciBpbiBvcmRlciB0byBtYWtlIGVuZW15IHNoaXBzIGludmlzaWJsZSEgKi9cXG4jZ2FtZWJvYXJkMSAuc2hpcEJveCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTksIDU5LCA1OSk7XFxufVxcblxcbiNnYW1lYm9hcmQyIC5zaGlwQm94IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgNTksIDU5KTtcXG59XFxuXFxuI3JlcGxheSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQzLCAyNTUsIDE0Myk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAxdmg7XFxuICBtYXJnaW46IDJ2aCAydmggMnZoIDJ2aDtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbn1cXG5cXG4jcmVwbGF5OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMDIsIDIwMiwgMjAyKTtcXG59XFxuXFxuI3R1cm4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0MywgMjU1LCAxNDMpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG4jdHVybjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjAyLCAyMDIsIDIwMik7XFxufVxcblxcbi5jaG9vc2VTaGlwcyB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgZ2FwOiAydmg7XFxufVxcblxcbnAge1xcbiAgbWF4LXdpZHRoOiAxNXZ3O1xcbiAgZm9udC1zaXplOiAxLjRyZW07XFxuICBwYWRkaW5nOiAydmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIxOCwgMjE4LCAyMTgsIDAuNCk7XFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUNBQWlDO0VBQ2pDLGlCQUFpQjtFQUNqQixTQUFTO0VBQ1QsVUFBVTtFQUNWLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHlEQUFtQztFQUNuQyxzQkFBc0I7RUFDdEIsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7RUFDdkIsUUFBUTtBQUNWOztBQUVBOztFQUVFOzBCQUN3QjtFQUN4QixXQUFXO0VBQ1gsWUFBWTtBQUNkO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLG1DQUFtQztFQUNuQyxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGlCQUFpQjtBQUNuQjs7QUFFQTs7RUFFRSxtQ0FBbUM7RUFDbkMsWUFBWTtFQUNaLDRCQUE0QjtFQUM1Qiw2QkFBNkI7RUFDN0IsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxZQUFZO0FBQ2Q7O0FBRUEsa0ZBQWtGO0FBQ2xGO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLG9DQUFvQztFQUNwQyxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLDhCQUE4QjtFQUM5QixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFlBQVk7RUFDWiwwQ0FBMEM7RUFDMUMsbUJBQW1CO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2FkIHJhZ2VcXFwiLCBjdXJzaXZlO1xcbiAgZm9udC1zaXplOiBsYXJnZXI7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImJnaW1nLmpwZWdcXFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbn1cXG5cXG4jZ2FtZWJvYXJkcyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiAzdnc7XFxufVxcblxcbiNnYW1lYm9hcmQxLFxcbiNnYW1lYm9hcmQyIHtcXG4gIC8qICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsqL1xcbiAgd2lkdGg6IDMzdnc7XFxuICBoZWlnaHQ6IDMzdnc7XFxufVxcbmgyIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogM3ZoIDN2aCAzdmggM3ZoO1xcbn1cXG5cXG4jZ2FtZWJvYXJkMiAuYm94IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig4OSwgMTMyLCAxODIpO1xcbiAgb3BhY2l0eTogMC43O1xcbn1cXG5cXG4ucm93IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIG1pbi1oZWlnaHQ6IDMuM3Z3O1xcbn1cXG5cXG4uYm94LFxcbi5ib3gxIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig4OSwgMTMyLCAxODIpO1xcbiAgb3BhY2l0eTogMC43O1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xcbiAgd2lkdGg6IDEwdnc7XFxuICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbiNnYW1lYm9hcmQyIC5ib3g6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU5LCA1OSwgNTkpO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4vKiBQcm9iYWJseSBuZWVkIHRvIHNlcGFyYXRlIHRoZXNlIGxhdGVyIGluIG9yZGVyIHRvIG1ha2UgZW5lbXkgc2hpcHMgaW52aXNpYmxlISAqL1xcbiNnYW1lYm9hcmQxIC5zaGlwQm94IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgNTksIDU5KTtcXG59XFxuXFxuI2dhbWVib2FyZDIgLnNoaXBCb3gge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU5LCA1OSwgNTkpO1xcbn1cXG5cXG4jcmVwbGF5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxNDMsIDI1NSwgMTQzKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDF2aDtcXG4gIG1hcmdpbjogMnZoIDJ2aCAydmggMnZoO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxufVxcblxcbiNyZXBsYXk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIwMiwgMjAyLCAyMDIpO1xcbn1cXG5cXG4jdHVybiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQzLCAyNTUsIDE0Myk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcbiN0dXJuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMDIsIDIwMiwgMjAyKTtcXG59XFxuXFxuLmNob29zZVNoaXBzIHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBnYXA6IDJ2aDtcXG59XFxuXFxucCB7XFxuICBtYXgtd2lkdGg6IDE1dnc7XFxuICBmb250LXNpemU6IDEuNHJlbTtcXG4gIHBhZGRpbmc6IDJ2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjE4LCAyMTgsIDIxOCwgMC40KTtcXG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDY2Nik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcwKTtcbiJdLCJuYW1lcyI6WyJnYW1lYm9hcmQiLCJzaG90cyIsImJvYXJkT2NjdXBpZWQiLCJzaGlwcyIsInBsYWNlU2hpcCIsIngiLCJ5IiwibGVuZ3RoIiwidmVydGljYWwiLCJuZXdTaGlwIiwiaGl0Qm94ZXMiLCJkZXN0cm95ZWQiLCJvY2N1cGllZCIsImkiLCJwdXNoIiwic3VuayIsImhpdCIsImhpdFBvaW50IiwiaW5kZXhPZiIsImlzU3VuayIsImNvdW50IiwidGhpcyIsInNoaXAiLCJhcnIiLCJpbmRleFgiLCJjb25zb2xlIiwibG9nIiwiaW5jbHVkZXMiLCJhbGVydCIsInJlY2VpdmVBdHRhY2siLCJzaGlwSW5kZXgiLCJmaWx0ZXIiLCJsb29zZSIsIlBsYXllciIsIm5hbWUiLCJlbmVteSIsImVuZW15Qm9hcmQiLCJ0dXJuIiwibWFrZU1vdmUiLCJhbHBoYWJldCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJlc3VsdCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJib2FyZDEiLCJib2FyZDIiLCJncmlkMSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbmRleExldHRlcnMiLCJyb3ciLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJkYXRhc2V0IiwiaWQiLCJqIiwiYm94IiwidGV4dENvbnRlbnQiLCJncmlkMiIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInNldFRpbWVvdXQiLCJtb3ZlIiwiYSIsImIiLCJzaGlwSW5kZXgyIiwiaCIsImJveDEiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJzaGlwQ291bnRlciIsInNoaXBMZW5ndGgiLCJzcGxpdEF0IiwiaW5kZXgiLCJzbGljZSIsInBhcnNlSW50IiwiZmluZENvbW1vbiIsImFycmF5MSIsImFycmF5MiIsImJveGVzIiwiZHJhd1NoaXBzIiwic2hpcFRlbXAiLCJzaGlweCIsInNoaXB5IiwiTmFOIiwic3BsaWNlIiwiZ2FtZWJvYXJkR3JpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwibW9kdWxlIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJydW50aW1lIiwiT3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwib2JqIiwia2V5IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiZG9uZSIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiZm4iLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzTmFOIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZ2V0IiwiZyIsInByb3AiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiYXNlVVJJIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=