(()=>{var t={170:(t,e,n)=>{"use strict";n(666);var r=function(){var t=[],e=[],n=[];return{shots:t,ships:n,boardOccupied:e,placeShip:function(t,r,o){for(var a=function(t){for(var e=[],n=[],r=[],o=0;o<t;o++)e.push(o),n.push("x");return{length:t,sunk:!1,hitBoxes:e,destroyed:n,occupied:r,hit:function(t,n){var o=r.indexOf(t+n);e[o]="x"},isSunk:function(){for(var n=0,r=0;r<t;r++)"x"===e[r]&&n++;return n===t&&(this.sunk=!0,!0)}}}(o),i=0;i<a.length;i++)a.occupied.push(t+(r+i)),e.push(t+(r+i));return n.push(a),a.occupied},receiveAttack:function(r,o,a){return t.push(r+o),e.includes(r+o)?(n[a].hit(r,o),!0===n[a].isSunk()?(console.log("".concat(n.filter((function(t){return!0===t.sunk})).length)),console.log("SHIP HAS BEEN SUNK!")):console.log("It's a hit!")):"missed!"},loose:function(){return n.filter((function(t){return!0===t.sunk})).length===n.length&&alert("All ships destroyed!")}}},o=function(t,e){var n=e;return{name:t,turn:!1,enemyBoard:n,makeMove:function t(){var e="ABCDEFGHIJ",r=e[Math.floor(Math.random()*e.length)],o=Math.floor(10*Math.random()+1),a=r+o;return n.shots.includes(a)?n.shots.includes(a)?t():void 0:{x:r,y:o,result:a}}}},a=n(379),i=n.n(a),c=n(795),s=n.n(c),u=n(569),l=n.n(u),d=n(565),p=n.n(d),h=n(216),f=n.n(h),v=n(589),g=n.n(v),m=n(426),A={};A.styleTagTransform=g(),A.setAttributes=p(),A.insert=l().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=f(),i()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;var y=r(),b=r();o("Apina",b),function(t,e){for(var n=document.getElementById("gameboard1"),r=["A","B","C","D","E","F","G","H","I","J"],o=0;o<10;o++){var a=document.createElement("div");a.classList.add("row"),n.appendChild(a),a.dataset.id=r[o];for(var i=1;i<11;i++){var c=document.createElement("div");c.classList.add("box1"),c.textContent="",c.dataset.id=a.dataset.id+i,a.appendChild(c)}}for(var s=document.getElementById("gameboard2"),u=function(n){var o=document.createElement("div");o.classList.add("row"),s.appendChild(o),o.dataset.id=r[n];for(var a=function(a){var i=document.createElement("div");i.classList.add("box"),i.textContent="",i.dataset.id=o.dataset.id+a,o.appendChild(i),i.addEventListener("click",(function(){for(var o="",c=0;c<t.ships.length;c++)t.ships[c].occupied.includes(i.dataset.id)&&(o=c);t.receiveAttack(r[n],a,o),t.boardOccupied.includes(i.dataset.id)?i.style.backgroundColor="red":i.style.backgroundColor="blue",setTimeout((function(){for(var n=e.makeMove(),r=n.x,o=n.y,a="",i=0;i<t.ships.length;i++)e.enemyBoard.ships[i].occupied.includes(n.result)&&(a=i);console.log(n.result),e.enemyBoard.receiveAttack(r,o,a);for(var c=document.getElementsByClassName("box1"),s=0;s<c.length;s++)c[s].dataset.id===n.result&&(e.enemyBoard.boardOccupied.includes(n.result)?c[s].style.backgroundColor="red":c[s].style.backgroundColor="blue")}),850),t.loose(),e.enemyBoard.loose()}))},i=1;i<11;i++)a(i)},l=0;l<10;l++)u(l)}(b,o("Nemesis",y)),y.placeShip("A",1,5),y.placeShip("B",2,4),y.placeShip("C",3,4),y.placeShip("D",4,3),y.placeShip("E",5,3),y.placeShip("F",5,3),y.placeShip("G",5,2),y.placeShip("H",6,2),y.placeShip("I",6,2),b.placeShip("A",2,5),b.placeShip("B",1,4),b.placeShip("C",4,4),b.placeShip("D",3,3),b.placeShip("E",1,3),b.placeShip("F",1,3),b.placeShip("G",7,2),b.placeShip("H",8,2),b.placeShip("I",6,2),function(t){for(var e=document.getElementsByClassName("box1"),n=0;n<e.length;n++)t.includes(e[n].dataset.id)&&e[n].classList.add("shipBox")}(y.boardOccupied)},426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var r=n(537),o=n.n(r),a=n(645),i=n.n(a),c=n(667),s=n.n(c),u=new URL(n(629),n.b),l=i()(o()),d=s()(u);l.push([t.id,'* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url('+d+");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n.shipBox {\n  background-color: black;\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(89, 132, 182);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iCAAiC;EACjC,iBAAiB;EACjB,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,yDAAmC;EACnC,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;;EAEE;0BACwB;EACxB,WAAW;EACX,YAAY;AACd;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;;EAEE,mCAAmC;EACnC,4BAA4B;EAC5B,6BAA6B;EAC7B,WAAW;AACb;;AAEA;;EAEE,YAAY;AACd;;AAEA,kFAAkF;AAClF;EACE,uBAAuB;AACzB;;AAEA;EACE,mCAAmC;AACrC",sourcesContent:['* {\n  font-family: "Road rage", cursive;\n  font-size: larger;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-image: url("bgimg.jpeg");\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n#gameboards {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3vw;\n}\n\n#gameboard1,\n#gameboard2 {\n  /*  display: flex;\n  flex-direction: column;*/\n  width: 33vw;\n  height: 33vw;\n}\nh2 {\n  margin-left: auto;\n  text-align: center;\n  padding: 3vh 3vh 3vh 3vh;\n}\n\n#gameboard2 .box {\n  background-color: rgb(89, 132, 182);\n}\n\n.row {\n  display: flex;\n  border: 1px solid black;\n  min-height: 3.3vw;\n}\n\n.box,\n.box1 {\n  background-color: rgb(89, 132, 182);\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n  width: 10vw;\n}\n\n.box:hover,\n.box:hover {\n  opacity: 0.5;\n}\n\n/* Probably need to separate these later in order to make enemy ships invisible! */\n.shipBox {\n  background-color: black;\n}\n\n#gameboard2 .shipBox {\n  background-color: rgb(89, 132, 182);\n}\n'],sourceRoot:""}]);const p=l},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var o=e&&e.prototype instanceof g?e:g,a=Object.create(o.prototype),i=new L(r||[]);return a._invoke=function(t,e,n){var r=d;return function(o,a){if(r===h)throw new Error("Generator is already running");if(r===f){if("throw"===o)throw a;return O()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=B(i,n);if(c){if(c===v)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var s=l(t,e,n);if("normal"===s.type){if(r=n.done?f:p,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=f,n.method="throw",n.arg=s.arg)}}}(t,n,i),a}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var d="suspendedStart",p="suspendedYield",h="executing",f="completed",v={};function g(){}function m(){}function A(){}var y={};s(y,a,(function(){return this}));var b=Object.getPrototypeOf,E=b&&b(b(j([])));E&&E!==n&&r.call(E,a)&&(y=E);var x=A.prototype=g.prototype=Object.create(y);function w(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function n(o,a,i,c){var s=l(t[o],t,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,i,c)}),(function(t){n("throw",t,i,c)})):e.resolve(d).then((function(t){u.value=t,i(u)}),(function(t){return n("throw",t,i,c)}))}c(s.arg)}var o;this._invoke=function(t,r){function a(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(a,a):a()}}function B(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var a=o.arg;return a?a.done?(n[t.resultName]=a.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function j(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:O}}function O(){return{value:e,done:!0}}return m.prototype=A,s(x,"constructor",A),s(A,"constructor",m),m.displayName=s(A,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,A):(t.__proto__=A,s(t,c,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},w(C.prototype),s(C.prototype,i,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},w(x),s(x,c,"Generator"),s(x,a,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=j,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(S),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],c=0;c<t.length;c++){var s=t[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=n(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var f=o(h,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var c=n(a[i]);e[c].references--}for(var s=r(t,o),u=0;u<a.length;u++){var l=n(a[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=s}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},629:(t,e,n)=>{"use strict";t.exports=n.p+"b6a51100243ae5c1ad98.jpeg"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n(666),n(170)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,